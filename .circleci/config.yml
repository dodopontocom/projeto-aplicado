version: 2.1
ambiente-producao: &ambiente-producao
    filters:
      branches:
        only:
          - master
ambiente-integracao: &ambiente-integracao
    filters:
      branches:
        only:
          - develop
ambiente-desenvolvimento: &ambiente-desenvolvimento
    filters:
      branches:
        ignore:
          - master
          - develop

jobs:
  Provisionamento:
    working_directory: /root/app
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: "Provisionar infraestrutura em PROD"
          command: |
          
            source ./.circleci/vars-ambientes/prod.sh
            
            commit_message="$(git log --format=oneline -n 1 ${CIRCLE_SHA1})"
            if [[ "$(echo ${commit_message} | grep -E "\[gcp-")" ]]; then
                echo ${GCLOUD_SERVICE_ACCOUNT} > ${GCLOUD_JSON_KEY_PATH}
                cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-gcp
                terraform init -backend-config="bucket=${GCLOUD_PROJECT_BUCKET_NAME}" -backend-config="prefix=${GCLOUD_PROJECT_BUCKET_PREFIX}"
                
                if [[ "$(echo ${commit_message} | grep -E "\[gcp-destroy\]")" ]]; then
                  terraform plan
                  terraform destroy -auto-approve
                elif [[ "$(echo ${commit_message} | grep -E "\[gcp-plan\]")" ]]; then
                  terraform plan
                elif [[ "$(echo ${commit_message} | grep -E "\[gcp-apply\]")" ]]; then
                  terraform plan
                  terraform apply -auto-approve
                fi
                
            elif [[ "$(echo ${commit_message} | grep -E "\[aws-")" ]]; then
                cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-aws
                terraform init -backend-config="bucket=${aws_bucket_name}" -backend-config="key=${aws_bucket_key}"
                if [[ "$(echo ${commit_message} | grep -E "\[aws-destroy\]")" ]]; then
                  cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-aws
                  terraform plan
                  terraform destroy -auto-approve
                elif [[ "$(echo ${commit_message} | grep -E "\[aws-plan\]")" ]]; then
                  cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-aws
                  terraform plan
                elif [[ "$(echo ${commit_message} | grep -E "\[aws-apply\]")" ]]; then
                  cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-aws
                  terraform plan
                  terraform apply -auto-approve
                fi
            else
                echo "Nenhum provisionamento para ser executado..."
            fi

  Provisionamento_Integracao:
    working_directory: /root/app
    docker:
      - image: hashicorp/terraform:full
    steps:
      - checkout
      - run:
          name: "Provisionar infraestrutura em INT"
          command: |
          
            source ./.circleci/vars-ambientes/int.sh
            
            commit_message="$(git log --format=oneline -n 1 ${CIRCLE_SHA1})"
            if [[ "$(echo ${commit_message} | grep -E "\[gcp-")" ]]; then
                echo ${INT_GCLOUD_SERVICE_ACCOUNT} > ${GCLOUD_JSON_KEY_PATH}
                cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-gcp
                terraform init -backend-config="bucket=${GCLOUD_PROJECT_BUCKET_NAME}" -backend-config="prefix=${GCLOUD_PROJECT_BUCKET_PREFIX}"
                
                if [[ "$(echo ${commit_message} | grep -E "\[gcp-destroy\]")" ]]; then
                  terraform plan
                  terraform destroy -auto-approve
                elif [[ "$(echo ${commit_message} | grep -E "\[gcp-plan\]")" ]]; then
                  terraform plan
                elif [[ "$(echo ${commit_message} | grep -E "\[gcp-apply\]")" ]]; then
                  terraform plan
                  terraform apply -auto-approve
                fi
                
            elif [[ "$(echo ${commit_message} | grep -E "\[aws-")" ]]; then
                cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-aws
                terraform init -backend-config="bucket=${aws_bucket_name}" -backend-config="key=${aws_bucket_key}"
                if [[ "$(echo ${commit_message} | grep -E "\[aws-destroy\]")" ]]; then
                  cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-aws
                  terraform plan
                  terraform destroy -auto-approve
                elif [[ "$(echo ${commit_message} | grep -E "\[aws-plan\]")" ]]; then
                  cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-aws
                  terraform plan
                elif [[ "$(echo ${commit_message} | grep -E "\[aws-apply\]")" ]]; then
                  cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-aws
                  terraform plan
                  terraform apply -auto-approve
                fi
            else
                echo "Nenhum provisionamento para ser executado..."
            fi

  Provisionamento_Desenvolvimento:
    working_directory: /root/app
    docker:
      - image: hashicorp/terraform:full
    steps:
      - checkout
      - run:
          name: "Provisionar infraestrutura em DEV"
          command: |
          
            source ./.circleci/vars-ambientes/dev.sh
            
            commit_message="$(git log --format=oneline -n 1 ${CIRCLE_SHA1})"
            if [[ "$(echo ${commit_message} | grep -E "\[gcp-")" ]]; then
                echo ${INT_GCLOUD_SERVICE_ACCOUNT} > ${GCLOUD_JSON_KEY_PATH}
                cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-gcp
                terraform init -backend-config="bucket=${GCLOUD_PROJECT_BUCKET_NAME}" -backend-config="prefix=${GCLOUD_PROJECT_BUCKET_PREFIX}"
                
                if [[ "$(echo ${commit_message} | grep -E "\[gcp-destroy\]")" ]]; then
                  terraform plan
                  terraform destroy -auto-approve
                elif [[ "$(echo ${commit_message} | grep -E "\[gcp-plan\]")" ]]; then
                  terraform plan
                elif [[ "$(echo ${commit_message} | grep -E "\[gcp-apply\]")" ]]; then
                  terraform plan
                  terraform apply -auto-approve
                fi
                
            elif [[ "$(echo ${commit_message} | grep -E "\[aws-")" ]]; then
                cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-aws
                terraform init -backend-config="bucket=${aws_bucket_name}" -backend-config="key=${aws_bucket_key}"
                if [[ "$(echo ${commit_message} | grep -E "\[aws-destroy\]")" ]]; then
                  cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-aws
                  terraform plan
                  terraform destroy -auto-approve
                elif [[ "$(echo ${commit_message} | grep -E "\[aws-plan\]")" ]]; then
                  cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-aws
                  terraform plan
                elif [[ "$(echo ${commit_message} | grep -E "\[aws-apply\]")" ]]; then
                  cd ${CIRCLE_WORKING_DIRECTORY}/cloud/terraform-aws
                  terraform plan
                  terraform apply -auto-approve
                fi
            else
                echo "Nenhum provisionamento para ser executado..."
            fi
          
  Aplicacao_Desenvolvimento:
    working_directory: /root/app
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: "Provisionar Aplicação em DEV"
          command: |
          
            source ./.circleci/vars-ambientes/dev.sh
            
            commit_message="$(git log --format=oneline -n 1 ${CIRCLE_SHA1})"
            
            if [[ "$(echo ${commit_message} | grep -E "\[nodejs\]")" ]]; then

                apt-get install -y nodejs npm

                echo ${INT_GCLOUD_SERVICE_ACCOUNT} > ${GCLOUD_JSON_KEY_PATH}
                APP_PATH="${CIRCLE_WORKING_DIRECTORY}/nodejs-pa"
                echo ${INT_GCLOUD_SERVICE_ACCOUNT} > ${APP_PATH}/backend/keyfile.json
                
                GAE_DEPLOYMENT_VERSION="$(echo ${CIRCLE_BRANCH//\//-}-build-${CIRCLE_BUILD_NUM} | tr '[:upper:]' '[:lower:]')"

                sed -i 's#GAE_DEPLOYMENT_VERSION#'${GAE_DEPLOYMENT_VERSION}# "${APP_PATH}/src/app/version/version.component.html"

                gcloud auth activate-service-account --key-file="${GCLOUD_JSON_KEY_PATH}"

                cd ${APP_PATH}
                echo n | npm install
                npm run build -- --configuration production

                echo "MONGO_ATLAS_STRING=\"${MONGO_ATLAS_STRING}\"" > ${APP_PATH}/backend/.env
                echo "JWT_KEY=\"${JWT_KEY}\"" >> ${APP_PATH}/backend/.env
                echo "GCLOUD_STORAGE_BASE_URL=\"${GCLOUD_STORAGE_BASE_URL}\"" >> ${APP_PATH}/backend/.env
                echo "REF_IMOVEL_PREFIX=\"${REF_IMOVEL_PREFIX}\"" >> ${APP_PATH}/backend/.env
                echo "GCS_BUCKET=\"${GCLOUD_APP_BUCKET_NAME}\"" >> ${APP_PATH}/backend/.env
                echo "GCLOUD_PROJECT=\"${GCLOUD_PROJECT_ID}\"" >> ${APP_PATH}/backend/.env
                echo "GCS_KEYFILE=\"./keyfile.json\"" >> ${APP_PATH}/backend/.env
                
                gcloud config set project "${GCLOUD_PROJECT_ID}"
                gcloud config set gcloudignore/enabled false
                cd ${APP_PATH}/backend
                gcloud --quiet app deploy "app.yaml" --version "${GAE_DEPLOYMENT_VERSION}"

                #gcp.auth.revokeSA "${GOOGLE_APPLICATION_CREDENTIALS}"
                #gcloud auth revoke "${GCLOUD_SA_EMAIL}"
                rm -vfr "${GOOGLE_APPLICATION_CREDENTIALS}"
                
            else
                echo "Nenhuma aplicação a ser atualizada..."
            fi

workflows:
  version: 2.1  
  cloud_workflow:
    jobs:
      - Provisionamento:
          <<: *ambiente-producao
      - Provisionamento_Integracao:
          <<: *ambiente-integracao
      - Provisionamento_Desenvolvimento:
          <<: *ambiente-desenvolvimento
      - Aplicacao_Desenvolvimento:
          <<: *ambiente-desenvolvimento
